---
// @ts-nocheck
import { parse, format } from "date-fns";
const { confs } = Astro.props;

function formatDateRange(from: Date, to: Date) {
  const sameYear = from.getFullYear() === to.getFullYear();
  const sameMonth = from.getMonth() === to.getMonth();
  const sameDay = from.getDate() === to.getDate();

  if (sameYear && sameMonth && sameDay) {
    return `${format(from, 'd MMMM, yyyy')}`;
  } else if (sameYear && sameMonth) {
    return `${format(from, 'd')}–${format(to, 'd MMMM, yyyy')}`;
  } else if (sameYear) {
    return `${format(from, 'd MMMM')} – ${format(to, 'd MMMM, yyyy')}`;
  } else {
    return `${format(from, 'd MMMM, yyyy')} – ${format(to, 'd MMMM, yyyy')}`;
  }
}

let parsedConfs = confs.map(conf => {
  const from = parse(conf.from, 'dd.MM.yyyy', new Date());
  const to = parse(conf.to, 'dd.MM.yyyy', new Date());
  return {
    ...conf,
    from: from,
    to: to,
    dateString: formatDateRange(from, to)
  }
})

parsedConfs.sort((a, b) => {
  return Math.abs(a.to - b.to); 
})

const now = new Date();

const pastConfs = parsedConfs.filter(conf => {
  return conf.to <= now
});

const futureConfs = parsedConfs.filter(conf => {
  return conf.to > now
});

---

<div class="content">
  <h2 class="animate">
    panels 
  </h2>

  <!-- <h4 class="animate">
    upcoming
  </h4> -->
  <div class="animate mb-6">
    <ul>
    {
      futureConfs.map(c => (
        <li class="entry">
          <b>"{c.title}"</b><br>
          <p class="text-sm"><b>{c.conf}</b>. {c.location}, {c.dateString}</p>
        </li>
      ))
    }
    </ul>
    <ul>
    {
      pastConfs.map(c => (
        <li class="entry outdated">
          <b>"{c.title}"</b><br>
          <p class="text-sm"><b>{c.conf}</b>. {c.location}, {c.dateString}</p>
        </li>
      ))
    }
    </ul>
  </div>
</div>